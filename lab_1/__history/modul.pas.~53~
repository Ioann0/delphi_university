Unit modul;

interface

uses dialogs, SysUtils;

//-----------------------<интерфейсная часть>---------------------------------//
Type TA = array of real;
     TI = array of integer;

var
    //n := readinteger;
    name, elem: string;
    n, code: integer;
    NN: byte;
    fl, fr: text;
    x: TA; y: TA;
    main_noned: integer;
    amount, real_elem: real;
    i, j, ix: byte;
    mcol, mrow: integer;

procedure array_input(var A: TA);
procedure array_output(var A: TA);
procedure number_of_negative_elements_of_main_and_secondary_diag(A: TA; var B: TA; var noned: integer);
procedure number_of_such_elements_in_each_odd_column(var A: TA; var sum: real);
procedure changing_the_elements_of_the_main_diagonal_of_the_matrix(var A: TA);
procedure sort(var A: TA; NN: byte);
function FILTR(st: string): string;

implementation
//-------------------< исполняемая часть >------------------------------------//
procedure array_input(var A: TA);
var i, j: byte; FL: text; s: string; r: real;
begin
  //showmessage('hello');
  Assign (FL, name); reset (FL);
  //read(fl, col, row);
  //read(n);
  //col:= n;
  //row:= n;
  SetLength(A, mcol*mrow);
  //showmessage(IntToStr(mcol));
//  readln(fl, s);
//  showmessage(s);
//  exit;
  for i:=0 to mrow-1 do begin
    for j:=0 to mcol-1 do begin
      read(fl, A[i*mcol+j]);
//      read(fl, r);
//      s := s + floattostr(r) + ' ';
    end;
  end;

  close(fl);
  //dispose();
end;

procedure array_output(var A: TA);
var i, j: byte;
begin
  for i:=0 to mrow-1 do begin
    for j:=0 to mcol-1 do begin
      //A[i*mcol+j]:= STR(A[i*mcol+j], elem);
      //write(fr, FILTR(SysUtils.IntToStr(A[i*mcol+j]:13:5)))
      str(A[i*mcol+j], elem);
      elem:= FILTR(elem);
      val(elem, real_elem, code);
      write(fr, real_elem:20:5);
    end;
    writeln(fr,'');
  end;

end;

procedure number_of_negative_elements_of_main_and_secondary_diag(A: TA; var B: TA; var noned: integer);
var i, j, ix: byte; FL: text;

begin
  noned:= 0;
  SetLength(B, mrow*mcol+mcol);
  for i:=0 to mrow-1 do begin
    if A[i*(mcol+1)]<0 then begin
      B[noned]:= A[i*(mcol+1)];
      noned:= noned + 1;
      B[noned]:= i*(mcol+1);
      noned:= noned + 1;
      B[noned]:= i*(mcol+1);
      noned:= noned + 1;
    end;
  end;

  for i:=1 to mrow do begin
    if A[i*(mcol-1)]<0 then begin
      B[noned]:= A[i*(mcol-1)];
      noned:= noned + 1;
      B[noned]:= i*(mcol-1);
      noned:= noned + 1;
      B[noned]:= i*(mcol-1);
      noned:= noned + 1;
    end;
  end;
end;

procedure number_of_such_elements_in_each_odd_column(var A: TA; var sum: real);
var i, j: byte;
begin
  j:=0;
  while j < mcol do begin
    if j mod 2 <> 0 then begin
      for i:=0 to mcol-1 do begin
        sum:= sum + A[(i*mcol)+j]
      end;
      writeln(fr, 'Sum of such elements in ', j, ' each odd column: ', sum);
      sum:=0;
    end;
    inc(j);
  end;
end;

procedure changing_the_elements_of_the_main_diagonal_of_the_matrix(var A: TA);
var i: byte; p: real;
begin
  for i:=0 to (mcol div 2)-1 do begin
    p:= A[i*(mcol+1)];
    A[i*(mcol+1)]:= A[(mcol*mrow-1)-i*(mcol+1)];
    A[(mcol*mrow-1)-i*(mcol+1)]:= p;
  end;
end;

         // Сортировка методом подсчета
// Сортировка методом подсчета
procedure sort(var A : TA; NN: byte);
var
  i,j : byte;
  B : TI;
  C : TA;
begin
  setlength(B, NN);
  setlength(C, NN);
// определение номеров мест элементов
  for i := 0 to NN-1 do
    B[i]:= 0;
  for i := (NN-1) downto 1 do
    for j := i-1 downto 0 do
      if A[i] >= A[j] then
        B[j]:=B[j]+1
      else
        B[i]:=B[i]+1;
  // Расстановка элементов массива в новый массив
  for i := 0 to NN-1 do C[B[i]]:=A[i];
  // Возврат массива в исходный массив
  for i := 0 to NN-1 do A[i]:= C[i];
end;

function FILTR(st: string): string;
Var i,j,l : integer;
begin
  l := length ( st );
  for i := 1 to l do
  if st [ i ] <> ' ' then
    for j := l downto i do
      if st [ j ] <> ' ' then begin
         FILTR := copy (st, i, j-i+1);
         exit; end;
  FILTR := '' ;
end;


begin
//<инициирующая часть>;
end .